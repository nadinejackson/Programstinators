-Make class Woo request basic user input, and output dialogue indicating day and night cycles. (The computer is God.)
	Attributes:
		-ArrayList<Character> livingChars
		-ArrayList<Mafia> mafia
		-ArrayList<Character> citizens
		-Doctor Doc
		-Investigator Detective
		-Character player
		-int type
		-Character maybeDed
		-String[] ALLNAMES
	Actions:
		+void begin()
		+String display(ArrayList)
		+void popGame(int)
		+void swap()
		+void day()
		+void night()


-Make class Character with:
	Attributes:
		-String name
		-boolean alive
		-String type
		-int accusations
		-int susPoints

	Actions:
		+Character(String)
		+String setName(String)
		+String getType()
		+String getName()
		+String toString()
		+boolean isAlive()
		+void die()
		+boolean vote(boolean)
		+Character accuse(Character)
		+String toString()
		+String listChars()
		+int getAccusations()
		+void incAccusations()
		+void resetAcc()
		+int getSusPoints()
		+void changeSusPts(int)

-Incorporate Character into Woo by having the player vote() every day and initializing the susVal randomly.
-Sort by susVal at the beginning of every day before voting
-Incorporate ArrayList<Character> livingChars into process and dialogue with people dying as appropriate
-Make story for how a game ends (Mafia won or lost)
-Make three subclasses of Character:
	Mafia:
		Actions:
			+Mafia(String)
			+kill()

	Doctor:
		Actions:
			+Doctor(String)
			+heal()

	Investigator:
		Actions:
			+Investigator(String)
-Update how game ending story works
-Allow player to choose whether they are Mafia, Doctor, or Investigator, and allow them to kill() and save() as appropriate.
-Woo outputs description of killed and death scene
-Ask player for name, type of character, and number of players
-Allow randomization of above
-Add more characters:
	Investigator
-Update rule list
-Allow the player to have simple dialogue with another character (hardcoded) during the day phase
-Make random susVal for each player
-Weight the susVal depending on whether the player is Mafia
-Make the susVal more accurate over time
-Increase susVal based on how much the player speaks
-Warn the player that susVal may increase based on dialogue
-Create list of characters to be displayed w/ numbers
-Update rule list
-Debug more
